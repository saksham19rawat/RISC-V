$date
   Wed Jul 16 02:25:10 2025
$end

$version
  2025.1.0
  $dumpfile ("Single Cycle.vcd") 
$end

$timescale
  1ps
$end

$scope module Single_Cycle_Top_Tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module Single_Cycle_Top $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 32 % PC_Top [31:0] $end
$var wire 32 & RD_Instr [31:0] $end
$var wire 32 ' RD1_Top [31:0] $end
$var wire 32 ( Imm_Ext_Top [31:0] $end
$var wire 32 ) ALUResult [31:0] $end
$var wire 32 * ReadData [31:0] $end
$var wire 32 + PCPlus4 [31:0] $end
$var wire 32 , RD2_Top [31:0] $end
$var wire 32 - SrcB [31:0] $end
$var wire 32 . Result [31:0] $end
$var wire 1 / RegWrite $end
$var wire 1 0 MemWrite $end
$var wire 1 1 ALUSrc $end
$var wire 1 2 ResultSrc $end
$var wire 2 3 ImmSrc [1:0] $end
$var wire 3 4 ALUControl_Top [2:0] $end
$scope module P_C $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 32 + PC_Next [31:0] $end
$var reg 32 5 PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 % a [31:0] $end
$var wire 32 6 b [31:0] $end
$var wire 32 + c [31:0] $end
$upscope $end
$scope module Instr_Mem $end
$var wire 32 % A [31:0] $end
$var wire 1 $ rst $end
$var wire 32 & RD [31:0] $end
$upscope $end
$scope module Reg_File $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 5 7 A1 [19:15] $end
$var wire 5 8 A2 [24:20] $end
$var wire 5 9 A3 [11:7] $end
$var wire 32 . WD3 [31:0] $end
$var wire 32 : WE3 [31:0] $end
$var wire 32 ' RD1 [31:0] $end
$var wire 32 , RD2 [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 32 & In [31:0] $end
$var wire 1 ; ImmSrc $end
$var wire 32 ( Imm_Ext [31:0] $end
$upscope $end
$scope module Muxtoalu $end
$var wire 32 , a [31:0] $end
$var wire 32 ( b [31:0] $end
$var wire 1 1 s $end
$var wire 32 - c [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 32 ' A [31:0] $end
$var wire 32 - B [31:0] $end
$var wire 3 4 ALUControl [2:0] $end
$var wire 32 ) Result [31:0] $end
$var wire 1 < Z $end
$var wire 1 = N $end
$var wire 1 > V $end
$var wire 1 ? C $end
$var wire 1 @ cout $end
$var wire 32 A a_and_b [31:0] $end
$var wire 32 B a_or_b [31:0] $end
$var wire 32 C not_b [31:0] $end
$var wire 32 D mux_1 [31:0] $end
$var wire 32 E mux_2 [31:0] $end
$var wire 32 F sum [31:0] $end
$var wire 32 G slt [31:0] $end
$var wire 1 H z $end
$upscope $end
$scope module Control_Unit_Top $end
$var wire 7 I Op [6:0] $end
$var wire 7 I funct7 [6:0] $end
$var wire 3 J funct3 [14:12] $end
$var wire 1 / RegWrite $end
$var wire 1 1 ALUSrc $end
$var wire 1 0 MemWrite $end
$var wire 1 2 ResultSrc $end
$var wire 1 K Branch $end
$var wire 2 3 ImmSrc [1:0] $end
$var wire 3 4 ALUControl [2:0] $end
$var wire 2 L ALUOp [1:0] $end
$scope module main_decoder $end
$var wire 7 I Op [6:0] $end
$var wire 1 M Zero $end
$var wire 1 / RegWrite $end
$var wire 1 1 ALUSrc $end
$var wire 1 0 MemWrite $end
$var wire 1 2 ResultSrc $end
$var wire 1 K Branch $end
$var wire 2 3 ImmSrc [1:0] $end
$var wire 2 L ALUOp [1:0] $end
$var wire 1 N PCSrc $end
$upscope $end
$scope module alu_decoder $end
$var wire 7 I op [6:0] $end
$var wire 3 J funct3 [14:12] $end
$var wire 7 I funct7 [6:0] $end
$var wire 3 4 ALUControl [2:0] $end
$var wire 2 L ALUOp [1:0] $end
$var wire 2 O concatenation [1:0] $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 32 ) A [31:0] $end
$var wire 32 , WD [31:0] $end
$var wire 1 # clk $end
$var wire 1 0 WE $end
$var wire 1 $ rst $end
$var wire 32 * RD [31:0] $end
$upscope $end
$scope module Muxtoreg $end
$var wire 32 ) a [31:0] $end
$var wire 32 * b [31:0] $end
$var wire 1 2 s $end
$var wire 32 . c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
0"
0#
0$
bx %
b0 &
b0 '
b0 (
b0 )
b0 *
bx +
b0 ,
b0 -
b0 .
0/
00
01
02
b0 3
b0 4
bx 5
b100 6
b0 7
b0 8
b0 9
bz0 :
0;
z<
0=
0>
0?
0@
b0 A
b0 B
b11111111111111111111111111111111 C
b0 D
b0 E
b0 F
bz G
1H
b0 I
b0 J
0K
b0 L
0M
0N
b0 O
$end

#50000
1!
1#
b0 %
b100 +
b0 5

#100000
0!
0#

#150000
1!
1"
1#
1$
b11000101110001000110011 &
b101 '
b110 (
b101 )
bx *
b100 ,
b100 -
b101 .
1/
b11 4
b101 7
b110 8
b100 9
bz1 :
1@
b100 A
b101 B
b11111111111111111111111111111011 C
b11111111111111111111111111111011 D
b101 E
b1 F
b110011 I
b110 J
b10 L
b11 O

#200000
0!
0#

#250000
1!
1#
b100 %
b101101100010010000100011 &
bx '
b1000 (
bx )
b1000 +
bx ,
b1000 -
bx .
0/
10
11
b1 3
b0 4
b100 5
b1100 7
b1011 8
b1000 9
bz0 :
1;
x=
x>
x?
x@
b0x000 A
bx1xxx B
b11111111111111111111111111110111 C
b1000 D
bx E
bx F
xH
b100011 I
b10 J
b0 L

#300000
0!
0#

#350000
1!
1#
b1000 %
bx &
bx (
b1100 +
bx -
x/
x0
x1
x2
bx 3
bx 4
b1000 5
bx 7
bx 8
bx 9
bzx :
x;
bx A
bx B
bx C
bx D
bx I
bx J
xK
bx L
bx O

#400000
0!
0#

#450000
1!
1#
b1100 %
b10000 +
b1100 5

#500000
0!
0#

#550000
1!
1#
b10000 %
b10100 +
b10000 5
